input:
  type: kubernetes
  plugin:
    watches:
      - group: example.com
        version: v1
        kind: Foo
        owns:
          - group: example.com
            version: v1
            kind: Bar
    result:
      requeue: meta().exists("requeue")
      requeue_after: ${!meta("requeue_after").or("")}
  processors:
    - log:
        message: ${!content()}

pipeline:
  processors:
    - switch:
        # ignore deleted items
        - check: meta().exists("deleted")
          processors:
            - bloblang: root = deleted()

        # reconcile dependent resources
        - processors:
            - branch:
                processors:
                  - bloblang: |
                      meta size = spec.size
                      apiVersion = "example.com/v1"
                      kind = "Bar"
                      metadata.labels = metadata.labels
                      metadata.name = metadata.name
                      metadata.namespace = metadata.namespace
                      metadata.ownerReferences = [{
                        "apiVersion": apiVersion,
                        "kind": kind,
                        "controller": true,
                        "blockOwnerDeletion": true,
                        "name": metadata.name,
                        "uid": metadata.uid
                      }]
                  - type: kubernetes
                    plugin:
                      operator: get
                  - bloblang: |
                      root = this
                      spec.size = meta("size").number()
                  - type: kubernetes
                    plugin:
                      operator_mapping: if errored() { "create" } else { "update" }
                result_map: |
                  root.status.bar = metadata.uid
                  root.status.status = "Ready"
            - bloblang: |
                root = this
                meta requeue = if metadata.annotations.exists("x-requeue") { "true" }
                meta requeue_after = metadata.annotations."x-requeue-after".or("")
            - sync_response: {}

output:
  type: kubernetes_status
  plugin: {}

logger:
  level: DEBUG
